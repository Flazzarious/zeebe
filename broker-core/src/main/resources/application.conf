# Zeebe broker configuration file

# Overview -------------------------------------------
# This file contains a complete list of available configuration options.
# It is a HOCON file; for documentation about the syntax, please refer to the official HOCON
# documentation: https://github.com/lightbend/config/blob/master/HOCON.md

# Paths:
# Relative paths are resolved relative to the installation directory of the
# broker.
# ----------------------------------------------------
zeebe {
  gateway {
    # Includes standalone configuration then overrides for embedded
    include required("gateway.conf")

    # Enabled the embedded gateway to start on broker startup
    embed = true
    embed = ${?ZEEBE_EMBED_GATEWAY}

    network {
      # Sets the host the embedded gateway binds to.
      host = "0.0.0.0"
      host = ${?zeebe.network.host}
      host = ${?ZEEBE_HOST}
      host = ${?gateway.network.host}
      host = ${?ZEEBE_GATEWAY_HOST}
    }
  }

  # This section contains the network configuration. Particularly, it allows to
  # configure the hosts and ports the broker should bind to. The broker exposes two sockets:
  # 1. command: the socket which is used for gateway-to-broker communication
  # 2. internal: the socket which is used for broker-to-broker communication
  # 3. monitoring: the socket which is used to monitor the broker
  network {
    # Controls the default host the broker should bind to. Can be overwritten on a
    # per binding basis for client, management and replication
    host = "0.0.0.0"
    host = ${?ZEEBE_HOST}

    # If a port offset is set it will be added to all ports specified in the config
    # or the default values. This is a shortcut to not always specifying every port.
    #
    # The offset will be added to the second last position of the port, as Zeebe
    # requires multiple ports. As example a portOffset of 5 will increment all ports
    # by 50, i.e. 26500 will become 26550 and so on.
    portOffset = 0
    portOffset = ${?ZEEBE_PORT_OFFSET}

    commandApi {
      # Overrides the host used for gateway-to-broker communication
      host = "localhost"
      host = ${?ZEEBE_COMMAND_API_HOST}

      # Sets the port used for gateway-to-broker communication
      port = 26501
      port = ${?ZEEBE_COMMAND_API_PORT}

      # Sets the size of the buffer used for buffering outgoing messages
      sendBufferSize = "16M"
      sendBufferSize = ${?ZEEBE_COMMAND_API_SEND_BUFFER}
    }

    internalApi {
      # Overrides the host used for internal broker-to-broker communication
      host = "localhost"
      host = ${?ZEEBE_INTERNAL_API_HOST}

      # Sets the port used for internal broker-to-broker communication
      port = 26502
      port = ${?ZEEBE_INTERNAL_API_PORT}
    }

    monitoringApi {
      # Overrides the host used for exposing monitoring information
      host = "localhost"
      host = ${?ZEEBE_MONITORING_API_HOST}

      # Sets the port used for exposing monitoring information
      port = 9600
      port = ${?ZEEBE_MONITORING_API_PORT}
    }
  }

  # This section allows to configure Zeebe's data storage. Data is stored in
  # "partition folders". A partition folder has the following structure:
  #
  # partition-0                       (root partition folder)
  # ├── partition.json                (metadata about the partition)
  # ├── segments                      (the actual data as segment files)
  # │   ├── 00.data
  # │   └── 01.data
  # └── state                     	(stream processor state and snapshots)
  #     └── stream-processor
  #		  ├── runtime
  #		  └── snapshots
  data {
    # Specify a list of directories in which data is stored. Using multiple
    # directories makes sense in case the machine which is running Zeebe has
    # multiple disks which are used in a JBOD (just a bunch of disks) manner. This
    # allows to get greater throughput in combination with a higher io thread count
    # since writes to different disks can potentially be done in parallel.
    directories = ["data"]
    directories = ${?ZEEBE_DIRECTORIES}

    # The size of data log segment files.
    logSegmentSize = "512M"
    logSegmentSize = ${?ZEEBE_LOG_SEGMENT_SIZE}

    # How often we take snapshots of streams (time unit)
    snapshotPeriod = "15m"
    snapshotPeriod = ${?ZEEBE_SNAPSHOT_PERIOD}

    # The maximum number of snapshots kept (must be a positive integer). When this
    # limit is passed the oldest snapshot is deleted.
    maxSnapshots = "3"
    maxSnapshots = ${?ZEEBE_MAX_SNAPSHOTS}

    # How often follower partitions will check for new snapshots to replicate from
    # the leader partitions. Snapshot replication enables faster failover by
    # reducing how many log entries must be reprocessed in case of leader change.
    snapshotReplicationPeriod = "5m"
    snapshotReplicationPeriod = ${?ZEEBE_SNAPSHOT_REPLICATION_PERIOD}
  }

  # This section contains all cluster related configurations, to setup an zeebe cluster
  cluster {
    # Specifies the unique id of this broker node in a cluster.
    # The id should be between 0 and number of nodes in the cluster (exclusive).
    #
    # This setting can also be overridden using the environment variable ZEEBE_NODE_ID.
    nodeId = 0
    nodeId = ${?ZEEBE_NODE_ID}

    # Controls the number of partitions, which should exist in the cluster.
    partitionsCount = 1
    partitionsCount = ${?ZEEBE_PARTITIONS_COUNT}

    # Controls the replication factor, which defines the count of replicas per partition.
    # The replication factor cannot be greater than the number of nodes in the cluster.
    replicationFactor = 1
    replicationFactor = ${?ZEEBE_REPLICATION_FACTOR}

    # Specifies the zeebe cluster size. This value is used to determine which broker
    # is responsible for which partition.
    clusterSize = 1
    clusterSize = ${?ZEEBE_CLUSTER_SIZE}

    # Allows to specify a list of known other nodes to connect to on startup
    # The contact points of the internal network configuration must be specified.
    # The format is [HOST:PORT]
    # Example:
    # initialContactPoints = [ "192.168.1.22:26502", "192.168.1.32:26502" ]
    #
    # This setting can also be overridden using the environment variable ZEEBE_CONTACT_POINTS
    # specifying a comma-separated list of contact points.
    #
    # To guarantee the cluster can survive network partitions, all nodes must be specified
    # as initial contact points.
    #
    # Default is empty list:
    initialContactPoints = []
    initialContactPoints = ${?ZEEBE_CONTACT_POINTS}

    # Allows to specify a name for the cluster
    # Example:
    clusterName = "zeebe-cluster"
    clusterName = ${?ZEEBE_CLUSTER_NAME}
  }

  threads {
    # Controls the number of non-blocking CPU threads to be used. WARNING: You
    # should never specify a value that is larger than the number of physical cores
    # available. Good practice is to leave 1-2 cores for ioThreads and the operating
    # system (it has to run somewhere). For example, when running Zeebe on a machine
    # which has 4 cores, a good value would be 2.
    cpuThreadCount = 2
    cpuThreadCount = ${?ZEEBE_CPU_THREAD_COUNT}

    # Controls the number of io threads to be used. These threads are used for
    # workloads that write data to disk. While writing, these threads are blocked
    # which means that they yield the CPU.
    ioThreadCount = 2
    ioThreadCount = ${?ZEEBE_IO_THREAD_COUNT}
  }

  # Configure exporters below; note that configuration parsing conventions do not apply to exporter
  # arguments, which will be parsed as normal TOML.
  #
  # Each exporter should be configured following this template:
  #
  # id:
  #   property should be unique in this configuration file, as it will server as the exporter
  #   ID for loading/unloading.
  # jarPath:
  #   path to the JAR file containing the exporter class. JARs are only loaded once, so you can define
  #   two exporters that point to the same JAR, with the same class or a different one, and use args
  #   to parametrize its instantiation.
  # className:
  #   entry point of the exporter, a class which *must* extend the io.zeebe.exporter.Exporter
  #   interface.
  #
  # A nested table as [exporters.args] will allow you to inject arbitrary arguments into your
  # class through the use of annotations.
  #
  # Enable the following debug exporter to log the exported records to console
  # This exporter can also be enabled using the environment variable ZEEBE_DEBUG, the pretty print
  # option will be enabled if the variable is set to "pretty".

  # exporters += {
  #   id = "debug-log"
  #   className = "io.zeebe.broker.exporter.debug.DebugLogExporter"
  #   args = {
  #     logLevel = "debug"
  #     prettyPrint = false
  #   }
  # }
  #
  # Enable the following debug exporter to start a http server to inspect the exported records
  #
  # exporters += {
  #   id = "debug-http"
  #   className = "io.zeebe.broker.exporter.debug.DebugHttpExporter"
  #   args = {
  #     port = 8000
  #     limit = 1024
  #   }
  # }
  #
  # An example configuration for the elasticsearch exporter:
  #
  # exporters += {
  #   id = "elasticsearch"
  #   className = "io.zeebe.exporter.ElasticsearchExporter"
  #   args {
  #     url = "http://localhost:9200"
  #
  #     bulk {
  #       delay = 5
  #       size = 1_000
  #     }
  #
  #     authentication {
  #       username = elastic
  #       password = changeme
  #     }
  #
  #     index {
  #       prefix = "zeebe-record"
  #       createTemplate = true
  #       command = false
  #       event = true
  #       rejection = false
  #       deployment = true
  #       error = true
  #       incident = true
  #       job = true
  #       jobBatch = false
  #       message = false
  #       messageSubscription = false
  #       variable = true
  #       variableDocument = false
  #       workflowInstance = true
  #       workflowInstanceCreation = false
  #       workflowInstanceSubscription = false
  #     }
  #   }
  # }
  exporters = []
}
